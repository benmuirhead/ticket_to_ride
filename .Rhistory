source("route.R")
source("get_edge_on_asp_from_route.R")
i
players[[i]]$routes[2]
ed
ed[1]
s = Sys.time()
players = createPlayers(2)
n = 1
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]]$routes))
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed))
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
e = Sys.time()
print(e - s)
time = time + (e - s)
show_path_all
#main
setwd("~/GitHub/ticket_to_ride")
source("setup.R")
source("load_data.R")
short = TRUE
source("build_network.R")
source("build_all_asp.R")
source("show_a_shortest_path.R")
source("plotS.R")
source("claim_delete_lines.R")
source("create_players.R")
source("player_summary.R")
source("route.R")
source("get_edge_on_asp_from_route.R")
source('~/GitHub/ticket_to_ride/route.R')
s = Sys.time()
players = createPlayers(2)
n = 1
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]]$routes))
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed))
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
e = Sys.time()
print(e - s)
time = time + (e - s)
random_route()
random_route()
random_route()
players[[i]]$routes
players[[i]]$routes[1]
source('~/GitHub/ticket_to_ride/main.R')
source('~/GitHub/ticket_to_ride/main.R')
source('~/GitHub/ticket_to_ride/main.R')
players[[n]]$routes)
players[[n]]$routes
players[[n]][[routes]]
players[[n]][["routes"]]
players[[n]][["routes"]][[1]]
players[[n]][["routes"]][[2]]
turns = 2
for (i in 1:loops) {
s = Sys.time()
players = createPlayers(2)
n = 1
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed))
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
e = Sys.time()
print(e - s)
time = time + (e - s)
}
print(time / loops)
ed
ed[1]
ed[2]
source('~/GitHub/ticket_to_ride/main.R')
for (i in players) {
print(i)
p_sum(i, edges)
}
length(players)
source('~/GitHub/ticket_to_ride/player_summary.R')
source('~/GitHub/ticket_to_ride/main.R')
source('~/GitHub/ticket_to_ride/player_summary.R')
#main
setwd("~/GitHub/ticket_to_ride")
source("setup.R")
source("load_data.R")
short = TRUE
source("build_network.R")
source("build_all_asp.R")
source("show_a_shortest_path.R")
source("plotS.R")
source("claim_delete_lines.R")
source("create_players.R")
source("player_summary.R")
source("route.R")
source("get_edge_on_asp_from_route.R")
players = createPlayers(2)
show_path_all(players)
turns = 1
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
show_path_all(players)
turns = 3
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
n
players[[n]]
players[[n]]$current_map
ed=get_edge_on_asp_from_route()
edges
edges
edges
edges
edge.attributes(n)
View(edges)
V(n)
net
V(net)
V(net)[1]
V(net)[3]
edge("Atlanta","Charleston")
edge
edge("Atlanta","Charleston")$owner
E(n)["Atlanta"]
E(net)
E(net)["Atlanta"]
E(net)["Atlanta","Charleston"]
simple_es_index
igraph::simple_es_index
igraph
igraph_demo()
igraph_demo
igraph_demo()
1
igraph_demo(1)
igraph_demo("smallworld")
get.edge(1)
get.edge(net,1)
get.edge(net,"Atlanta")
get.edge(net,"Atlanta-Charleston")
E(net)[E(net)$owner==1]
E(net)[E(net)$owner==0]
E(net)[E(net)$owner==2]
show_path_routes()
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==2]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==1]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]]#tail
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]]$tail
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]][1]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]][[1]]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]]..getNamespace()
..getNamespace()
..getNamespace(name = a)
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][[1]][1]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1][[1]]
E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1][[1]][[1]]
ends(E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1][[1]])
ends(players[[1]]$current_map,E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1][[1]])
ends(players[[1]]$current_map,E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0][1])
ends(players[[1]]$current_map,E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==0])
ends(players[[1]]$current_map,E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==1])
x=ends(players[[1]]$current_map,E(players[[1]]$current_map)[E(players[[1]]$current_map)$owner==1])
x
all_asp_a_to_b
n = p$current_map
n=players[[1]]$current_map
n
asp=players[[1]]$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
p=players
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
edges = matrix(ncol = 2, nrow = 0)
routes_claimed=ends(n,E(n)[E(n)$owner==1])
asp
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
b_index = as.numeric(V(n)[[b]])
a_index
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
n
p = players[[1]]
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
edges = matrix(ncol = 2, nrow = 0)
routes_claimed=ends(n,E(n)[E(n)$owner==1])
routes_claimed
edges
i
j
j=1
r = c(all_asp_a_to_b[[i]][[j]]$name, all_asp_a_to_b[[i]][[j+1]]$name)
r
apply(routes_claimed, 1, function(r, want) isTRUE(all.equal(r, want)), wantVec)
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r)
r
c(1,2)
c("sdkfjlsd","adj")
r=c("Chicago","Denver")
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r)
r=c("Chicago","Saint Louis")
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r)
r=c("Saint Louis""Chicago")
r=c("Saint Louis","Chicago")
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r)
claimed = apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r) ||
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), c(r[2],r[1]))
claimed
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), c(r[2],r[1])
)
apply(routes_claimed, 1, function(x, want) isTRUE(all.equal(x, want)), r)
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
loops = 1
time = 0
turns = 3
for (i in 1:loops) {
s = Sys.time()
players = createPlayers(2)
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
e = Sys.time()
print(e - s)
time = time + (e - s)
}
print(time / loops)
claimed
any(c(FALSE,FALSE))
any(c(FALSE,TRUE))
any(c(TRUE,TRUE))
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
source('~/GitHub/ticket_to_ride/main.R')
source('~/GitHub/ticket_to_ride/main.R')
debugSource('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
source('~/GitHub/ticket_to_ride/main.R')
get_edge_on_asp_from_route()
debugSource('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
r
claimed
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), r)
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), c(r[2], r[1]))
routes_claimed
length(routes_claimed)
get_edge_on_asp_from_route()
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
get_edge_on_asp_from_route()
p=players[[1]]
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
edges = matrix(ncol = 2, nrow = 0)
routes_claimed = ends(n, E(n)[E(n)$owner == 1])
routes_claimed
length(routes_claimed) > 0
any(claimed)
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
get_edge_on_asp_from_route()
get_edge_on_asp_from_route()
source('~/GitHub/ticket_to_ride/main.R')
source('~/GitHub/ticket_to_ride/main.R')
claimed
r
n = p$current_map
n
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
edges = matrix(ncol = 2, nrow = 0)
routes_claimed = ends(n, E(n)[E(n)$owner == 1])
routes_claimed
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
p = players[[1]]
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
edges = matrix(ncol = 2, nrow = 0)
routes_claimed = ends(n, E(n)[E(n)$owner == 1])
routes_claimed
all_asp_a_to_b
length(routes_claimed)
length(routes_claimed) > 0)
length(routes_claimed) > 0
r
r = c(all_asp_a_to_b[[i]][[j]]$name, all_asp_a_to_b[[i]][[j + 1]]$name)
r
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), r)
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), r) ||
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), c(r[2], r[1]))
claimed = apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), r) ||
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), c(r[2], r[1]))
claimed
any(claimed)
source('~/GitHub/ticket_to_ride/main.R')
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
l
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
show_path_all()
show_path_all(players)
p=players[[1]]
n = p$current_map
asp = p$all_asp
a = p$routes[[1]]
b = p$routes[[2]]
a_index = as.numeric(V(n)[[a]])
b_index = as.numeric(V(n)[[b]])
b_start_in_a_asp = sum(asp[[a]]$nrgeo[1:(b_index - 1)]) + 1
asp_count = asp[[a]]$nrgeo[b_index]
all_asp_a_to_b = asp[[a]]$res[b_start_in_a_asp:(b_start_in_a_asp +
asp_count - 1)]
all_asp_a_to_b
any(FALSE)
any(iFALSE)
i
j
edges = matrix(ncol = 2, nrow = 0)
routes_claimed = ends(n, E(n)[E(n)$owner == 1])
routes_claimed
clamed = FALSE
r = c(all_asp_a_to_b[[i]][[j]]$name, all_asp_a_to_b[[i]][[j + 1]]$name)
r
if (!any(claimed)) {
edges = rbind(edges, r)
}
edges
any(claimed)
claimed
length(routes_claimed)
if (length(routes_claimed) > 0) {
claimed = apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), r) ||
apply(routes_claimed, 1, function(x, want)
isTRUE(all.equal(x, want)), c(r[2], r[1]))
} else{
clamed = FALSE
}
clamed
!any(claimed)
claimed
clamed
remove(clamed)
source('~/GitHub/ticket_to_ride/get_edge_on_asp_from_route.R')
for (j in 1:turns) {
for (n in 1:length(players)) {
# players = claim_random_line_players(players, n)
print(players[[n]]$name)
print(paste("route", players[[n]][["routes"]][[1]],"-",players[[n]][["routes"]][[2]]))
# Get an edge to claim
ed = get_edge_on_asp_from_route(players[[n]])
print(paste("edge:", ed[1],ed[2]))
# Claim Line and delete from other players
players = claim_line_players(players, p = n, ed[1], ed[2])
ps_sums(players, TRUE)
show_path_all(players)
}
}
